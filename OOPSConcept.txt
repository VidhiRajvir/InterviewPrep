Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc in programming. 
The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.

1. Abstraction:
Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or the non-essentials units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.

There are two ways to achieve abstraction in java

Abstract class (0 to 100%)
Interface (100%)

Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.

An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.

Abstract Method in Java

A method which is declared as abstract and does not have implementation is known as an abstract method.

An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.

The abstract class can also be used to provide some implementation of the interface. In such case, the end user may not be forced to override all the methods of the interface.

Interface
An interface in Java is a blueprint of a class. It has static constants and abstract methods. 
There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.
Java Interface also represents the IS-A relationship.

Since Java 8, we can have default and static methods in an interface.
Since Java 9, we can have private methods in an interface.

An interface is declared by using the interface keyword. It provides total abstraction; means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface.

A class extends another class, an interface extends another interface, but a class implements an interface.

Q) Multiple inheritance is not supported through class in java, but it is possible by an interface, why?
As we have explained in the inheritance chapter, multiple inheritance is not supported in the case of class because of ambiguity. However, it is supported in case of an interface because there is no ambiguity. It is because its implementation is provided by the implementation class.

Q) What is marker or tagged interface?
An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc. They are used to provide some essential information to the JVM so that JVM may perform some useful operation.

The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.
When traversing a graph, an object may be encountered that does not support the Serializable interface. In this case the NotSerializableException will be thrown and will identify the class of the non-serializable object

Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures:
  private void writeObject(java. io. ObjectOutputStream out)
      throws IOException
  private void readObject(java. io. ObjectInputStream in)
      throws IOException, ClassNotFoundException;
  private void readObjectNoData()
      throws ObjectStreamException;

Nested Interface in Java
Note: An interface can have another interface which is known as a nested interface. 

Difference between Abstract class and Interface:
1) Abstract class can have abstract and non-abstract methods.	Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.	Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and non-static variables.	Interface has only static and final variables.
4) Abstract class can provide the implementation of interface.	Interface can't provide the implementation of abstract class.
5) The abstract keyword is used to declare abstract class.	The interface keyword is used to declare interface.
6) An abstract class can extend another Java class and implement multiple Java interfaces.	An interface can extend another Java interface only.
7) An abstract class can be extended using keyword "extends".	An interface can be implemented using keyword "implements".
8) A Java abstract class can have class members like private, protected, etc.	Members of a Java interface are public by default.
9)Example:
public abstract class Shape{
public abstract void draw();
}	Example:
public interface Drawable{
void draw();
}

2.Encapsulation:
Encapsulation describes bundling data and methods that work on that data within one unit, like a class in Java. We often often use this concept to hide an object’s internal representation or state from the outside. This is called information hiding.
A getter method retrieves an attribute and a setter method changes it. Depending on the methods that you implement, you can decide if an attribute can be read and changed. You may also control if the attribute is read-only or not visible at all.

3. Inheritence 
Inheritance is an important pillar of OOP(Object-Oriented Programming). It is the mechanism in java by which one class is allowed to inherit the features(fields and methods) of another class. 

Types of Inheritance in Java

Single Inheritance - In single inheritance, a sub-class is derived from only one super class. It inherits the properties and behavior of a single-parent class. Sometimes it is also known as simple inheritance.
MultiLevel Inheritance - In multi-level inheritance, a class is derived from a class which is also derived from another class is called multi-level inheritance.
Hierarchical Inheritance - If a number of classes are derived from a single base class, it is called hierarchical inheritance.
Multiple Inheritance - Java does not support multiple inheritances due to ambiguity.
Hybrid Inheritance(Through Interfaces)

Inheritance is a mechanism of driving a new class from an existing class. The existing (old) class is known as base class or super class or parent class. The new class is known as a derived class or sub class or child class. It allows us to use the properties and behavior of one class (parent) in another class (child).

Inheritance provides the reusability of code especially when there is a large scale of code to reuse. It also establishes the relationship between different classes that is known as a Is-a relationship.

Constructor cannot be inherited in Java.
Private members do not get inherited in Java.
Cyclic inheritance is not permitted in Java.
Assign parent reference to child objects.
Constructors get executed because of super() present in the constructor.

4.Polymorphism

The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in more than one form. 

Types of Java Polymorphism
In Java Polymorphism is mainly divided into two types: 

Compile-time Polymorphism
Runtime Polymorphism

Compile-Time Polymorphism in Java
It is also known as static polymorphism. This type of polymorphism is achieved by function overloading or operator overloading. 
Note: But Java doesn’t support the Operator Overloading.

Method Overloading
When there are multiple functions with the same name but different parameters then these functions are said to be overloaded. Functions can be overloaded by changes in the number of arguments or/and a change in the type of arguments.

Runtime Polymorphism in Java
It is also known as Dynamic Method Dispatch. It is a process in which a function call to the overridden method is resolved at Runtime. This type of polymorphism is achieved by Method Overriding. Method overriding, on the other hand, occurs when a derived class has a definition for one of the member functions of the base class. That base function is said to be overridden.

Advantages of Polymorphism in Java
Increases code reusability by allowing objects of different classes to be treated as objects of a common class.
Improves readability and maintainability of code by reducing the amount of code that needs to be written and maintained.
Supports dynamic binding, enabling the correct method to be called at runtime, based on the actual class of the object.
Enables objects to be treated as a single type, making it easier to write generic code that can handle objects of different types.


Can we have a function in the interface with a body ?
Yes. Interfaces can implement methods since Java 8. To do so you must add the “default” keyword to the method's signature.

Can we override the default function in the implementing class ? OR How do we call the default methods of an interface in the implementation class ? 
Yes, in Java, implementing classes can override default methods in interfaces to provide a different implementation.
If two interfaces have same name default method , we need to override that method in our implementation class . Its a rule .

 We override the default function in the class and inside its body use the <interfaceName>.super.<methodName>()
@Override annontation is used which indicates that the method is overriden

 If we are overriding a default function in our implementation class , then how can we call the default function of the interface ? 

How to access the variables in our implementation class which have been defined in the interface ? Can we change its value in the implementation class and Why ? 
No we cant change a variable as all the variable are public static final in an interface

 If a class A is implementing an interface I and extending a class C . Which is correct ?
When a class implements an interface and extends a class, the keyword order is important. "Extends" must come before "implements". For example, "public class ClassName extends AbstractClassName implements Interface".

If my class A extends interface B and interface C , both having same default method “power” . Even if my object of class A does not call power and does not overrides the default method power , will there be any issues and why ?
We need to override the method to avoid ambiguity

Is it possible that in parent class , function A has protected access modifier  In child class which extends parent , while overriding , can we give access modifier of A as :

(i) public 

(ii) private
private as we can give weaker privilages to the sub class


